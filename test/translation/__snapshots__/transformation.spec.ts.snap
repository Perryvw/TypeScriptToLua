// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Transformation (callNamespace) 1`] = `"Namespace:myFunction();"`;

exports[`Transformation (characterEscapeSequence) 1`] = `
"local quoteInDoubleQuotes = \\"\\\\' \\\\' \\\\'\\";
local quoteInTemplateString = \\"\\\\' \\\\' \\\\'\\";
local doubleQuoteInQuotes = \\"\\\\\\" \\\\\\" \\\\\\"\\";
local doubleQuoteInDoubleQuotes = \\"\\\\\\" \\\\\\" \\\\\\"\\";
local doubleQuoteInTemplateString = \\"\\\\\\" \\\\\\" \\\\\\"\\";
local backQuoteInQuotes = \\"\` \` \`\\";
local backQuoteInDoubleQuotes = \\"\` \` \`\\";
local backQuoteInTemplateString = \\"\` \` \`\\";
local escapedCharsInQuotes = \\"\\\\\\\\ \\\\0 \\\\b \\\\t \\\\n \\\\v \\\\f \\\\\\" \\\\' \`\\";
local escapedCharsInDoubleQUotes = \\"\\\\\\\\ \\\\0 \\\\b \\\\t \\\\n \\\\v \\\\f \\\\\\" \\\\'\\";
local escapedCharsInTemplateString = \\"\\\\\\\\ \\\\0 \\\\b \\\\t \\\\n \\\\v \\\\f \\\\\\" \\\\' \`\\";
local nonEmptyTemplateString = \\"Level 0: \\\\n\\\\t \\" .. (tostring(\\"Level 1: \\\\n\\\\t\\\\t \\" .. (tostring(\\"Level 3: \\\\n\\\\t\\\\t\\\\t \\" .. (tostring(\\"Last level \\\\n --\\") .. \\" \\\\n --\\")) .. \\" \\\\n --\\")) .. \\" \\\\n --\\");"
`;

exports[`Transformation (classExtension1) 1`] = `
"MyClass.myFunction = function(self)
end;"
`;

exports[`Transformation (classExtension2) 1`] = `
"TestClass.myFunction = function(self)
end;"
`;

exports[`Transformation (classExtension3) 1`] = `
"RenamedTestClass.myFunction = function(self)
end;
RenamedMyClass.myFunction = function(self)
end;"
`;

exports[`Transformation (classExtension4) 1`] = `
"MyClass.test = \\"test\\";
MyClass.testP = \\"testP\\";
MyClass.myFunction = function(self)
end;"
`;

exports[`Transformation (classPureAbstract) 1`] = `
"ClassB = ClassB or {};
ClassB.__index = ClassB;
ClassB.prototype = ClassB.prototype or {};
ClassB.prototype.__index = ClassB.prototype;
ClassB.prototype.constructor = ClassB;
ClassB.new = function(...)
    local self = setmetatable({}, ClassB.prototype);
    self:____constructor(...);
    return self;
end;
ClassB.prototype.____constructor = function(self)
end;"
`;

exports[`Transformation (continue) 1`] = `
"do
    local i = 0;
    while i < 10 do
        do
            if i < 5 then
                goto __continue1;
            end
        end
        ::__continue1::
        i = i + 1;
    end
end"
`;

exports[`Transformation (continueConcurrent) 1`] = `
"do
    local i = 0;
    while i < 10 do
        do
            if i < 5 then
                goto __continue1;
            end
            if i == 7 then
                goto __continue1;
            end
        end
        ::__continue1::
        i = i + 1;
    end
end"
`;

exports[`Transformation (continueNested) 1`] = `
"do
    local i = 0;
    while i < 5 do
        do
            if (i % 2) == 0 then
                goto __continue1;
            end
            do
                local j = 0;
                while j < 2 do
                    do
                        if j == 1 then
                            goto __continue3;
                        end
                    end
                    ::__continue3::
                    j = j + 1;
                end
            end
        end
        ::__continue1::
        i = i + 1;
    end
end"
`;

exports[`Transformation (continueNestedConcurrent) 1`] = `
"do
    local i = 0;
    while i < 5 do
        do
            if (i % 2) == 0 then
                goto __continue1;
            end
            do
                local j = 0;
                while j < 2 do
                    do
                        if j == 1 then
                            goto __continue3;
                        end
                    end
                    ::__continue3::
                    j = j + 1;
                end
            end
            if i == 4 then
                goto __continue1;
            end
        end
        ::__continue1::
        i = i + 1;
    end
end"
`;

exports[`Transformation (do) 1`] = `
"local e = 10;
repeat
    do
        e = e - 1;
    end
    ::__continue1::
until not (e > 0);"
`;

exports[`Transformation (enum) 1`] = `
"TestEnum = {};
TestEnum.val1 = 0;
TestEnum[0] = \\"val1\\";
TestEnum.val2 = 2;
TestEnum[2] = \\"val2\\";
TestEnum.val3 = 3;
TestEnum[3] = \\"val3\\";"
`;

exports[`Transformation (enumHeterogeneous) 1`] = `
"TestEnum = {};
TestEnum.val1 = 0;
TestEnum[0] = \\"val1\\";
TestEnum.val2 = 3;
TestEnum[3] = \\"val2\\";
TestEnum.val3 = \\"baz\\";
TestEnum.baz = \\"val3\\";"
`;

exports[`Transformation (enumMembersOnly) 1`] = `
"val1 = 0;
val2 = 2;
val3 = 3;
val4 = \\"bye\\";
local a = val1;"
`;

exports[`Transformation (enumString) 1`] = `
"TestEnum = {};
TestEnum.val1 = \\"foo\\";
TestEnum.foo = \\"val1\\";
TestEnum.val2 = \\"bar\\";
TestEnum.bar = \\"val2\\";
TestEnum.val3 = \\"baz\\";
TestEnum.baz = \\"val3\\";"
`;

exports[`Transformation (exportStatement) 1`] = `
"local exports = exports or {};
local xyz = 4;
exports.xyz = xyz;
exports.uwv = xyz;
do
    local __TSTL_export = require(\\"xyz\\");
    for ____exportKey, ____exportValue in pairs(__TSTL_export) do
        exports[____exportKey] = ____exportValue;
    end
end
do
    local __TSTL_xyz = require(\\"xyz\\");
    local abc = __TSTL_xyz.abc;
    local def = __TSTL_xyz.def;
    exports.abc = abc;
    exports.def = def;
end
do
    local __TSTL_xyz = require(\\"xyz\\");
    local def = __TSTL_xyz.abc;
    exports.def = def;
end
return exports;"
`;

exports[`Transformation (for) 1`] = `
"do
    local i = 1;
    while i <= 100 do
        do
        end
        ::__continue1::
        i = i + 1;
    end
end"
`;

exports[`Transformation (forIn) 1`] = `
"for i in pairs({a = 1, b = 2, c = 3, d = 4}) do
    do
    end
    ::__continue1::
end"
`;

exports[`Transformation (forOf) 1`] = `
"local ____TS_array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
for ____TS_index = 1, #____TS_array do
    local i = ____TS_array[____TS_index];
    do
    end
    ::__continue1::
end"
`;

exports[`Transformation (functionRestArguments) 1`] = `
"varargsFunction = function(self, a, ...)
    local b = ({...});
end;"
`;

exports[`Transformation (getSetAccessors) 1`] = `
"require(\\"lualib_bundle\\");
MyClass = MyClass or {};
MyClass.__index = MyClass;
MyClass.prototype = MyClass.prototype or {};
MyClass.prototype.____getters = {};
MyClass.prototype.__index = __TS__Index(MyClass.prototype);
MyClass.prototype.____setters = {};
MyClass.prototype.__newindex = __TS__NewIndex(MyClass.prototype);
MyClass.prototype.constructor = MyClass;
MyClass.new = function(...)
    local self = setmetatable({}, MyClass.prototype);
    self:____constructor(...);
    return self;
end;
MyClass.prototype.____constructor = function(self)
end;
MyClass.prototype.____getters.field = function(self)
    return self._field + 4;
end;
MyClass.prototype.____setters.field = function(self, v)
    self._field = v * 2;
end;
local instance = MyClass.new();
instance.field = 4;
local b = instance.field;
local c = (4 + instance.field) * 3;"
`;

exports[`Transformation (interfaceIndex) 1`] = `
"local a = {};
a.abc = \\"def\\";"
`;

exports[`Transformation (methodRestArguments) 1`] = `
"MyClass = MyClass or {};
MyClass.__index = MyClass;
MyClass.prototype = MyClass.prototype or {};
MyClass.prototype.__index = MyClass.prototype;
MyClass.prototype.constructor = MyClass;
MyClass.new = function(...)
    local self = setmetatable({}, MyClass.prototype);
    self:____constructor(...);
    return self;
end;
MyClass.prototype.____constructor = function(self)
end;
MyClass.prototype.varargsFunction = function(self, a, ...)
    local b = ({...});
end;"
`;

exports[`Transformation (modulesChangedVariableExport) 1`] = `
"local exports = exports or {};
exports.foo = 1;
return exports;"
`;

exports[`Transformation (modulesClassExport) 1`] = `
"local exports = exports or {};
exports.TestClass = exports.TestClass or {};
exports.TestClass.__index = exports.TestClass;
exports.TestClass.prototype = exports.TestClass.prototype or {};
exports.TestClass.prototype.__index = exports.TestClass.prototype;
exports.TestClass.prototype.constructor = exports.TestClass;
exports.TestClass.new = function(...)
    local self = setmetatable({}, exports.TestClass.prototype);
    self:____constructor(...);
    return self;
end;
exports.TestClass.prototype.____constructor = function(self)
end;
return exports;"
`;

exports[`Transformation (modulesClassWithMemberExport) 1`] = `
"local exports = exports or {};
exports.TestClass = exports.TestClass or {};
exports.TestClass.__index = exports.TestClass;
exports.TestClass.prototype = exports.TestClass.prototype or {};
exports.TestClass.prototype.__index = exports.TestClass.prototype;
exports.TestClass.prototype.constructor = exports.TestClass;
exports.TestClass.new = function(...)
    local self = setmetatable({}, exports.TestClass.prototype);
    self:____constructor(...);
    return self;
end;
exports.TestClass.prototype.____constructor = function(self)
end;
exports.TestClass.prototype.memberFunc = function(self)
end;
return exports;"
`;

exports[`Transformation (modulesFunctionExport) 1`] = `
"local exports = exports or {};
exports.publicFunc = function(self)
end;
return exports;"
`;

exports[`Transformation (modulesFunctionNoExport) 1`] = `
"publicFunc = function(self)
end;"
`;

exports[`Transformation (modulesImportAll) 1`] = `"local Test = require(\\"test\\");"`;

exports[`Transformation (modulesImportNamed) 1`] = `
"local __TSTL_test = require(\\"test\\");
local TestClass = __TSTL_test.TestClass;"
`;

exports[`Transformation (modulesImportNamedSpecialChars) 1`] = `
"local __TSTL_kebab_module = require(\\"kebab-module\\");
local TestClass = __TSTL_kebab_module.TestClass;
local __TSTL_dollar_module = require(\\"dollar$module\\");
local TestClass = __TSTL_dollar_module.TestClass;
local __TSTL_singlequote_module = require(\\"singlequote'module\\");
local TestClass = __TSTL_singlequote_module.TestClass;
local __TSTL_hash_module = require(\\"hash#module\\");
local TestClass = __TSTL_hash_module.TestClass;
local __TSTL_space_module = require(\\"space module\\");
local TestClass = __TSTL_space_module.TestClass;"
`;

exports[`Transformation (modulesImportRenamed) 1`] = `
"local __TSTL_test = require(\\"test\\");
local RenamedClass = __TSTL_test.TestClass;"
`;

exports[`Transformation (modulesImportRenamedSpecialChars) 1`] = `
"local __TSTL_kebab_module = require(\\"kebab-module\\");
local RenamedClass = __TSTL_kebab_module.TestClass;
local __TSTL_dollar_module = require(\\"dollar$module\\");
local RenamedClass = __TSTL_dollar_module.TestClass;
local __TSTL_singlequote_module = require(\\"singlequote'module\\");
local RenamedClass = __TSTL_singlequote_module.TestClass;
local __TSTL_hash_module = require(\\"hash#module\\");
local RenamedClass = __TSTL_hash_module.TestClass;
local __TSTL_space_module = require(\\"space module\\");
local RenamedClass = __TSTL_space_module.TestClass;"
`;

exports[`Transformation (modulesImportWithoutFromClause) 1`] = `"require(\\"test\\");"`;

exports[`Transformation (modulesNamespaceExport) 1`] = `
"local exports = exports or {};
exports.TestSpace = exports.TestSpace or {};
local TestSpace = exports.TestSpace;
do
end
return exports;"
`;

exports[`Transformation (modulesNamespaceExportEnum) 1`] = `
"local exports = exports or {};
exports.test = exports.test or {};
local test = exports.test;
do
    test.TestEnum = {};
    test.TestEnum.foo = \\"foo\\";
    test.TestEnum.foo = \\"foo\\";
    test.TestEnum.bar = \\"bar\\";
    test.TestEnum.bar = \\"bar\\";
end
return exports;"
`;

exports[`Transformation (modulesNamespaceNestedWithMemberExport) 1`] = `
"local exports = exports or {};
exports.TestSpace = exports.TestSpace or {};
local TestSpace = exports.TestSpace;
do
    TestSpace.TestNestedSpace = TestSpace.TestNestedSpace or {};
    local TestNestedSpace = TestSpace.TestNestedSpace;
    do
        TestNestedSpace.innerFunc = function(self)
        end;
    end
end
return exports;"
`;

exports[`Transformation (modulesNamespaceNoExport) 1`] = `
"TestSpace = TestSpace or {};
do
end"
`;

exports[`Transformation (modulesNamespaceWithMemberExport) 1`] = `
"local exports = exports or {};
exports.TestSpace = exports.TestSpace or {};
local TestSpace = exports.TestSpace;
do
    TestSpace.innerFunc = function(self)
    end;
end
return exports;"
`;

exports[`Transformation (modulesNamespaceWithMemberNoExport) 1`] = `
"local exports = exports or {};
exports.TestSpace = exports.TestSpace or {};
local TestSpace = exports.TestSpace;
do
    local innerFunc;
    innerFunc = function(self)
    end;
end
return exports;"
`;

exports[`Transformation (modulesVariableExport) 1`] = `
"local exports = exports or {};
exports.foo = \\"bar\\";
return exports;"
`;

exports[`Transformation (modulesVariableNoExport) 1`] = `"local foo = \\"bar\\";"`;

exports[`Transformation (namespace) 1`] = `
"myNamespace = myNamespace or {};
do
    local nsMember;
    nsMember = function(self)
    end;
end"
`;

exports[`Transformation (namespaceMerge) 1`] = `
"MergedClass = MergedClass or {};
MergedClass.__index = MergedClass;
MergedClass.prototype = MergedClass.prototype or {};
MergedClass.prototype.__index = MergedClass.prototype;
MergedClass.prototype.constructor = MergedClass;
MergedClass.new = function(...)
    local self = setmetatable({}, MergedClass.prototype);
    self:____constructor(...);
    return self;
end;
MergedClass.prototype.____constructor = function(self)
    self.propertyFunc = function(____)
    end;
end;
MergedClass.staticMethodA = function(self)
end;
MergedClass.staticMethodB = function(self)
    self:staticMethodA();
end;
MergedClass.prototype.methodA = function(self)
end;
MergedClass.prototype.methodB = function(self)
    self:methodA();
    self:propertyFunc();
end;
MergedClass = MergedClass or {};
do
    MergedClass.namespaceFunc = function(self)
    end;
end
local mergedClass = MergedClass.new();
mergedClass:methodB();
mergedClass:propertyFunc();
MergedClass:staticMethodB();
MergedClass:namespaceFunc();"
`;

exports[`Transformation (namespaceNested) 1`] = `
"myNamespace = myNamespace or {};
do
    myNamespace.myNestedNamespace = myNamespace.myNestedNamespace or {};
    local myNestedNamespace = myNamespace.myNestedNamespace;
    do
        local nsMember;
        nsMember = function(self)
        end;
    end
end"
`;

exports[`Transformation (namespacePhantom) 1`] = `
"nsMember = function(self)
end;"
`;

exports[`Transformation (returnDefault) 1`] = `
"myFunc = function(self)
    return;
end;"
`;

exports[`Transformation (shorthandPropertyAssignment) 1`] = `
"local f;
f = function(____, x)
    return ({x = x});
end;"
`;

exports[`Transformation (tryCatch) 1`] = `
"do
    local ____TS_try, er = pcall(function()
        local a = 42;
    end);
    if not ____TS_try then
        local b = \\"fail\\";
    end
end"
`;

exports[`Transformation (tryCatchFinally) 1`] = `
"do
    local ____TS_try, er = pcall(function()
        local a = 42;
    end);
    if not ____TS_try then
        local b = \\"fail\\";
    end
    do
        local c = \\"finally\\";
    end
end"
`;

exports[`Transformation (tryFinally) 1`] = `
"do
    pcall(function()
        local a = 42;
    end);
    do
        local b = \\"finally\\";
    end
end"
`;

exports[`Transformation (tupleReturn) 1`] = `
"tupleReturn = function(self)
    return 0, \\"foobar\\";
end;
tupleReturn(_G);
noTupleReturn(_G);
local a, b = tupleReturn(_G);
local c, d = table.unpack(noTupleReturn(_G));
a, b = tupleReturn(_G);
c, d = table.unpack(noTupleReturn(_G));
local e = ({tupleReturn(_G)});
local f = noTupleReturn(_G);
e = ({tupleReturn(_G)});
f = noTupleReturn(_G);
foo(_G, ({tupleReturn(_G)}));
foo(_G, noTupleReturn(_G));
tupleReturnFromVar = function(self)
    local r = {1, \\"baz\\"};
    return table.unpack(r);
end;
tupleReturnForward = function(self)
    return tupleReturn(_G);
end;
tupleNoForward = function(self)
    return ({tupleReturn(_G)});
end;
tupleReturnUnpack = function(self)
    return table.unpack(tupleNoForward(_G));
end;"
`;

exports[`Transformation (typeAssert) 1`] = `
"local test1 = 10;
local test2 = 10;"
`;

exports[`Transformation (while) 1`] = `
"local d = 10;
while d > 0 do
    do
        d = d - 1;
    end
    ::__continue1::
end"
`;
