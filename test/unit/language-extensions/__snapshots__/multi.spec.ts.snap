// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`invalid $multi call ($multi()): code 1`] = `"____(_G)"`;

exports[`invalid $multi call ($multi()): diagnostics 1`] = `"main.ts(2,9): error TSTL: The $multi function must be called in return statements."`;

exports[`invalid $multi call ($multi): code 1`] = `"local ____ = ____"`;

exports[`invalid $multi call ($multi): diagnostics 1`] = `"main.ts(2,9): error TSTL: The $multi function must be called in return statements."`;

exports[`invalid $multi call (([a] = $multi(1)) => {}): code 1`] = `
"local function ____(____, ____bindingPattern0)
    if ____bindingPattern0 == nil then
        ____bindingPattern0 = ____(_G, 1)
    end
    local a = ____bindingPattern0[1]
end"
`;

exports[`invalid $multi call (([a] = $multi(1)) => {}): diagnostics 1`] = `"main.ts(2,16): error TSTL: The $multi function must be called in return statements."`;

exports[`invalid $multi call (({ $multi });): code 1`] = `"local ____ = nil"`;

exports[`invalid $multi call (({ $multi });): diagnostics 1`] = `"main.ts(2,12): error TSTL: The $multi function must be called in return statements."`;

exports[`invalid $multi call (const [a = 0] = $multi()): code 1`] = `""`;

exports[`invalid $multi call (const [a = 0] = $multi()): diagnostics 1`] = `"main.ts(2,15): error TSTL: This array binding pattern cannot have initializers."`;

exports[`invalid $multi call (const {} = $multi();): code 1`] = `""`;

exports[`invalid $multi call (const {} = $multi();): diagnostics 1`] = `"main.ts(2,15): error TSTL: Expected an array destructuring pattern."`;

exports[`invalid $multi call (const a = $multi();): code 1`] = `""`;

exports[`invalid $multi call (const a = $multi();): diagnostics 1`] = `"main.ts(2,15): error TSTL: Expected an array destructuring pattern."`;

exports[`invalid direct $multi function use (const [a] = $multi()): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    local args = {...}
    return table.unpack(args)
end
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (const [a] = $multi()): diagnostics 1`] = `"main.ts(7,21): error TSTL: The $multi function must be called in return statements."`;

exports[`invalid direct $multi function use (const [a] = $multi(1)): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    local args = {...}
    return table.unpack(args)
end
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (const [a] = $multi(1)): diagnostics 1`] = `"main.ts(7,21): error TSTL: The $multi function must be called in return statements."`;

exports[`invalid direct $multi function use (const _ = null, [a] = $multi(1)): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    local args = {...}
    return table.unpack(args)
end
local _ = nil
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (const _ = null, [a] = $multi(1)): diagnostics 1`] = `"main.ts(7,31): error TSTL: The $multi function must be called in return statements."`;

exports[`invalid direct $multi function use (const ar = [1]; const [a] = $multi(...ar)): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    local args = {...}
    return table.unpack(args)
end
local ar = {1}
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (const ar = [1]; const [a] = $multi(...ar)): diagnostics 1`] = `"main.ts(7,37): error TSTL: The $multi function must be called in return statements."`;

exports[`invalid direct $multi function use (let a; [a] = $multi()): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    local args = {...}
    return table.unpack(args)
end
local a
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (let a; [a] = $multi()): diagnostics 1`] = `"main.ts(7,22): error TSTL: The $multi function must be called in return statements."`;

exports[`invalid direct $multi function use (let a; for ([a] = $multi(1, 2); false; 1) {}): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    local args = {...}
    return table.unpack(args)
end
local a
do
    while false do
        local ____ = 1
    end
end
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (let a; for ([a] = $multi(1, 2); false; 1) {}): diagnostics 1`] = `"main.ts(7,27): error TSTL: The $multi function must be called in return statements."`;

exports[`invalid direct $multi function use (let a; for (const [a] = $multi(1, 2); false; 1) {}): code 1`] = `
"local ____exports = {}
local function multi(self, ...)
    local args = {...}
    return table.unpack(args)
end
local a
do
    while false do
        local ____ = 1
    end
end
____exports.a = a
return ____exports"
`;

exports[`invalid direct $multi function use (let a; for (const [a] = $multi(1, 2); false; 1) {}): diagnostics 1`] = `"main.ts(7,33): error TSTL: The $multi function must be called in return statements."`;
