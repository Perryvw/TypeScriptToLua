// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`vararg spread optimization $multi 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function multi(self, ...)
        return ...
    end
    local function test(self, ...)
        return select(
            2,
            multi(nil, ...)
        )
    end
    return test(nil, \\"a\\", \\"b\\", \\"c\\")
end
return ____exports"
`;

exports[`vararg spread optimization With cast [5.0] 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function pick(self, ...)
        local args = arg
        return args[2]
    end
    local function test(self, ...)
        return pick(
            nil,
            unpack(arg)
        )
    end
    return test(nil, \\"a\\", \\"b\\", \\"c\\")
end
return ____exports"
`;

exports[`vararg spread optimization basic use [5.0] 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function pick(self, ...)
        local args = arg
        return args[2]
    end
    local function test(self, ...)
        return pick(
            nil,
            unpack(arg)
        )
    end
    return test(nil, \\"a\\", \\"b\\", \\"c\\")
end
return ____exports"
`;

exports[`vararg spread optimization block statement [5.0] 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function pick(self, ...)
        local args = arg
        return args[2]
    end
    local function test(self, ...)
        local result
        do
            result = pick(
                nil,
                unpack(arg)
            )
        end
        return result
    end
    return test(nil, \\"a\\", \\"b\\", \\"c\\")
end
return ____exports"
`;

exports[`vararg spread optimization body-less arrow function [5.0] 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function pick(self, ...)
        local args = arg
        return args[2]
    end
    local function test(____, ...)
        return pick(
            nil,
            unpack(arg)
        )
    end
    return test(nil, \\"a\\", \\"b\\", \\"c\\")
end
return ____exports"
`;

exports[`vararg spread optimization curry [5.0] 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function test(self, fn, ...)
        return fn(
            nil,
            unpack(arg)
        )
    end
    return test(
        nil,
        function(____, arg) return arg end,
        \\"foobar\\"
    )
end
return ____exports"
`;

exports[`vararg spread optimization curry with indirect type [5.0] 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function test(self, obj, ...)
        local fn = obj.fn
        return fn(
            nil,
            unpack(arg)
        )
    end
    return test(
        nil,
        {fn = function(____, s) return s end},
        \\"foobar\\"
    )
end
return ____exports"
`;

exports[`vararg spread optimization finally clause [5.0] 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function pick(self, ...)
        local args = arg
        return args[2]
    end
    local function test(self, ...)
        do
            pcall(function()
                error(\\"foobar\\", 0)
            end)
            do
                return pick(
                    nil,
                    unpack(arg)
                )
            end
        end
    end
    return test(nil, \\"a\\", \\"b\\", \\"c\\")
end
return ____exports"
`;

exports[`vararg spread optimization function type declared inside scope [5.0] 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function test(self, ...)
        local function fn(____, ...)
            local args = arg
            return args[1]
        end
        return fn(
            nil,
            unpack(arg)
        )
    end
    test(nil, \\"foobar\\")
end
return ____exports"
`;

exports[`vararg spread optimization if statement [5.0] 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function pick(self, ...)
        local args = arg
        return args[2]
    end
    local function test(self, ...)
        if true then
            return pick(
                nil,
                unpack(arg)
            )
        end
    end
    return test(nil, \\"a\\", \\"b\\", \\"c\\")
end
return ____exports"
`;

exports[`vararg spread optimization loop statement [5.0] 1`] = `
"local ____exports = {}
function ____exports.__main(self)
    local function pick(self, ...)
        local args = arg
        return args[2]
    end
    local function test(self, ...)
        repeat
            do
                return pick(
                    nil,
                    unpack(arg)
                )
            end
        until not false
    end
    return test(nil, \\"a\\", \\"b\\", \\"c\\")
end
return ____exports"
`;
