[1mdiff --git a/src/CompilerOptions.ts b/src/CompilerOptions.ts[m
[1mindex 5f74012..17720d6 100644[m
[1m--- a/src/CompilerOptions.ts[m
[1m+++ b/src/CompilerOptions.ts[m
[36m@@ -1,5 +1,6 @@[m
 import * as ts from "typescript";[m
 import { JsxEmit } from "typescript";[m
[32m+[m[32mimport { Plugin } from "./transpilation/plugins"[m
 import * as diagnosticFactories from "./transpilation/diagnostics";[m
 [m
 type OmitIndexSignature<T> = {[m
[36m@@ -35,7 +36,7 @@[m [mexport interface TypeScriptToLuaOptions {[m
     noImplicitSelf?: boolean;[m
     noHeader?: boolean;[m
     noResolvePaths?: string[];[m
[31m-    plugins?: Array<ts.PluginImport | TransformerImport>;[m
[32m+[m[32m    plugins?: Array<ts.PluginImport | TransformerImport | {inline : Plugin}>;[m
     sourceMapTraceback?: boolean;[m
     tstlVerbose?: boolean;[m
     lua51AllowTryCatchInAsyncAwait?: boolean;[m
[1mdiff --git a/src/transpilation/index.ts b/src/transpilation/index.ts[m
[1mindex d4e8907..1fed6d3 100644[m
[1m--- a/src/transpilation/index.ts[m
[1m+++ b/src/transpilation/index.ts[m
[36m@@ -1,3 +1,4 @@[m
[32m+[m[32mimport { Plugin } from "enhanced-resolve";[m
 import * as fs from "fs";[m
 import * as path from "path";[m
 import * as ts from "typescript";[m
[36m@@ -16,7 +17,8 @@[m [mexport { TranspiledFile };[m
 export function transpileFiles([m
     rootNames: string[],[m
     options: CompilerOptions = {},[m
[31m-    writeFile?: ts.WriteFileCallback[m
[32m+[m[32m    writeFile?: ts.WriteFileCallback,[m
[32m+[m[32m    pluginsApi? : Plugin[m
 ): EmitResult {[m
     const program = ts.createProgram(rootNames, options);[m
     const preEmitDiagnostics = ts.getPreEmitDiagnostics(program);[m
[36m@@ -29,7 +31,8 @@[m [mexport function transpileFiles([m
 export function transpileProject([m
     configFileName: string,[m
     optionsToExtend?: CompilerOptions,[m
[31m-    writeFile?: ts.WriteFileCallback[m
[32m+[m[32m    writeFile?: ts.WriteFileCallback,[m
[32m+[m[32m    pluginsApi? : Plugin[][m
 ): EmitResult {[m
     const parseResult = parseConfigFileWithSystem(configFileName, optionsToExtend);[m
     if (parseResult.errors.length > 0) {[m
[1mdiff --git a/src/transpilation/plugins.ts b/src/transpilation/plugins.ts[m
[1mindex 0296fe6..25614bb 100644[m
[1m--- a/src/transpilation/plugins.ts[m
[1m+++ b/src/transpilation/plugins.ts[m
[36m@@ -49,7 +49,7 @@[m [mexport interface Plugin {[m
     onImportResolutionFailure?: (packageRoot : string, dependency : string) => string | undefined[m
 }[m
 [m
[31m-export function getPlugins(program: ts.Program): { diagnostics: ts.Diagnostic[]; plugins: Plugin[] } {[m
[32m+[m[32mexport function getPlugins(program: ts.Program, apiPlugins : Plugin[] = []) : { diagnostics: ts.Diagnostic[]; plugins: Plugin[] } {[m
     performance.startSection("getPlugins");[m
     const diagnostics: ts.Diagnostic[] = [];[m
     const pluginsFromOptions: Plugin[] = [];[m
[36m@@ -78,6 +78,6 @@[m [mexport function getPlugins(program: ts.Program): { diagnostics: ts.Diagnostic[];[m
     }[m
 [m
     performance.endSection("getPlugins");[m
[31m-[m
[31m-    return { diagnostics, plugins: pluginsFromOptions };[m
[32m+[m[41m    [m
[32m+[m[32m    return { diagnostics, plugins: pluginsFromOptions.concat(apiPlugins) };[m
 }[m
[1mdiff --git a/src/transpilation/transpiler.ts b/src/transpilation/transpiler.ts[m
[1mindex b4a9770..bd96f35 100644[m
[1m--- a/src/transpilation/transpiler.ts[m
[1m+++ b/src/transpilation/transpiler.ts[m
[36m@@ -12,6 +12,7 @@[m [mimport * as performance from "../measure-performance";[m
 [m
 export interface TranspilerOptions {[m
     emitHost?: EmitHost;[m
[32m+[m[32m    apiPlugins? : Plugin[m
 }[m
 [m
 export interface EmitOptions extends TranspileOptions {[m
